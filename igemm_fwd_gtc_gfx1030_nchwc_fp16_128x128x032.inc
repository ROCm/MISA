/*******************************************************************************
 *
 * MIT License
 *
 * Copyright (c) 2020-2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/
; generated by igemm_codegen.py (d1255206c19e1729060bce3fccc03507065497b7)
;
;----------------------------------------------------------
; starting of kernel igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me
; tensor_layout              : 'nchwc'
; gemm_m_per_block           : 128
; gemm_n_per_block           : 128
; gemm_k_per_block           : 32
; gemm_m_per_thread          : 4
; gemm_m_level0_cluster      : 4
; gemm_m_level1_cluster      : 4
; gemm_n_per_thread          : 4
; gemm_n_level0_cluster      : 4
; gemm_n_level1_cluster      : 4
; tensor_a_thread_lengths    : [1, 1, 1, 16]
; tensor_a_cluster_lengths   : [1, 4, 1, 64]
; tensor_b_thread_lengths    : [1, 1, 2, 8]
; tensor_b_cluster_lengths   : [1, 4, 1, 64]
; direction                  : 'fwd'
; precision                  : 'fp16'
; nxb                        : 0
; nxe                        : 1
; merge_e                    : 1
; 
; block_size                 : 256
; thread_tile                : 8x8
; lds_total                  : 32768
; lds_buffer_num             : 2
; 
.set k_p_in, 0
.set k_p_wei, 8
.set k_p_out, 16
.set k_hi, 24
.set k_wi, 28
.set k_n, 32
.set k_k, 36
.set k_c, 40
.set k_ho, 44
.set k_wo, 48
.set k_stride_h, 52
.set k_stride_w, 56
.set k_dilation_h, 60
.set k_dilation_w, 64
.set k_pad_h, 68
.set k_pad_w, 72
.set k_y, 76
.set k_x, 80
.set k_group, 84
.set k_magic_0, 88
.set k_magic_1, 92
.set k_magic_2, 96
.set k_magic_3, 100
.set k_magic_4, 104
.set k_magic_5, 108
.set k_shift_pack_0, 112
.set k_shift_pack_1, 116
.set k_gemm_k_global_split, 120
.set k__pack_0, 124
.set k_end, 128

.set s_ka, 0
.set s_bx, 2
.set s_by, 3
.set s_p_in, 4
.set s_p_wei, 8
.set s_p_out, 12
.set s_hi, 16
.set s_wi, 17
.set s_n, 18
.set s_k, 19
.set s_c, 20
.set s_ho, 21
.set s_wo, 22
.set s_stride_h, 23
.set s_stride_w, 24
.set s_dilation_h, 25
.set s_dilation_w, 26
.set s_pad_h, 27
.set s_pad_w, 28
.set s_y, 29
.set s_x, 30
.set s_group, 31
.set s_in_stride_c, 32
.set s_in_stride_n, 33
.set s_in_stride_nb0, 34
.set s_wei_stride_x, 35
.set s_out_stride_k, 36
.set s_out_stride_n, 37
.set s_block_gtc_ig, 38
.set s_block_gtc_ik, 39
.set s_block_gtc_inb, 40
.set s_move_slice_k_stride_gemm_k, 41
.set s_knum, 3
.set s_dim_br, 42
.set s_dim_mp, 43
.set s_dim_mr, 44
.set s_dim_np, 45
.set s_dim_nr, 46
.set s_move_slice_k_y, 47
.set s_move_slice_k_x, 48
.set s_move_slice_k_c, 49
.set s_diff_in_os_acc_c_y_x, 38
.set s_diff_in_os_ovf_y_acc_c, 0
.set s_diff_in_os_ovf_x_acc_y, 42
.set s_diff_in_iwi_acc_x, 43
.set s_diff_in_iwi_ovf_x, 45
.set s_diff_in_ihi_acc_y, 28
.set s_y_x_c, 27
.set s_kitr, 1
.set s_in_offset, 50
.set s_wei_offset, 51
.set s_magic_0, 64
.set s_magic_1, 65
.set s_magic_2, 14
.set s_magic_3, 15
.set s_magic_4, 10
.set s_magic_5, 11
.set s_shift_pack_0, 51
.set s_shift_pack_1, 52
.set s_tmp, 54

.set s_dbg, 60

.set s_x_dilation_w, 66
.set s_y_dilation_h, 67
.set s_end, 68

.set v_c, 0
.set v_a, 64
.set v_b, 72
.set v_gld_a, 80
.set v_gld_b, 88
.set v_sst_a_os, 96
.set v_sld_a_os, 97
.set v_sst_b_os, 98
.set v_sld_b_os, 99
.set v_in_os, 100
.set v_in_ihi_list, 102
.set v_in_iwi_list, 104
.set v_in_flag, 106
.set v_in_flag_n, 108
.set v_wei_os, 109
.set v_out_os, 110
.set v_gtc_ic, 111
.set v_gtc_iec, 112
.set v_gtc_iy, 113
.set v_gtc_ix, 114
.set v_in_inb, 115
.set v_in_in, 116
.set v_wei_ik, 117
.set v_co_sst, 116
.set v_co_sld, 118
.set v_out_flag, 117
.set v_out_inb, 115
.set v_gemm_in, 119
.set v_gemm_im, 120
.set v_co_sub_m_index, 120
.set v_co_sub_n_index, 119
.set v_out_in, 119
.set v_tmp, 122
.set v_wei_tmp_pack, 79
.set v_wei_flag, 128
.set v_dbg, 130
.set v_end, 144

.text
.globl igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me
.p2align 8
.type igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me,@function
igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me:
    s_load_dwordx2  s[s_p_in+0:s_p_in+1],    s[s_ka+0:s_ka+1],    0+k_p_in
    s_load_dwordx2  s[s_p_wei+0:s_p_wei+1],   s[s_ka+0:s_ka+1],    0+k_p_wei
    s_load_dwordx2  s[s_p_out+0:s_p_out+1],   s[s_ka+0:s_ka+1],    0+k_p_out
    s_load_dwordx8 s[s_hi+0:s_hi+7],    s[s_ka+0:s_ka+1],    0+k_hi
    s_load_dwordx8 s[s_stride_w+0:s_stride_w+7],    s[s_ka+0:s_ka+1],    0+k_stride_w
    s_load_dwordx2 s[s_magic_0+0:s_magic_0+1],  s[s_ka+0:s_ka+1],  0+k_magic_0
    s_load_dwordx2 s[s_magic_2+0:s_magic_2+1],  s[s_ka+0:s_ka+1],  0+k_magic_2
    s_load_dwordx2 s[s_magic_4+0:s_magic_4+1], s[s_ka+0:s_ka+1],  0+k_magic_4
    s_load_dword s[s_shift_pack_0], s[s_ka+0:s_ka+1],  0+k_shift_pack_0
    s_load_dword s[s_shift_pack_1], s[s_ka+0:s_ka+1],  0+k_shift_pack_1

    ; debug vgpr
    v_mov_b32 v1, 0
    v_add_lshl_u32 v[v_dbg], v0, v1, 2
    s_load_dwordx2 s[s_dbg+0:s_dbg+1], s[s_ka:s_ka+1], k_p_out
    s_mov_b32 s[s_dbg+2], s[s_bx]
    s_mov_b32 s[s_dbg+3], s[s_by]

    ; wei(1, ce, 1, k-vec-c) thread_lengths: 1x1x1x16, cluster_length: 1x4x1x64, k_pack:8
    v_mov_b32 v[v_tmp], v0
    v_and_b32 v[v_wei_ik], 63, v[v_tmp]
    ;v_lshlrev_b32 v[v_wei_ik], 3, v[v_wei_ik]
    v_lshrrev_b32 v[v_tmp], 6, v[v_tmp]
    v_and_b32 v[v_gtc_iec], 3, v[v_tmp]


    ; inp(1, ce, nb0, nb1) thread_length: 1x1x2x8, cluster_length: 1x4x1x64, k_pack:8
    v_mov_b32 v[v_tmp], v0
    v_and_b32 v[v_in_inb], 63, v[v_tmp]
    ;v_lshlrev_b32 v[v_in_inb], 3, v[v_in_inb]

    s_mov_b32 s[s_tmp], 16777215
    s_waitcnt lgkmcnt(0)

    ; calculate index
    s_lshr_b32 s[s_move_slice_k_y], s[s_y], 24
    s_lshr_b32 s[s_move_slice_k_x], s[s_x], 24
    s_lshr_b32 s[s_move_slice_k_c], s[s_c], 24
    s_and_b32 s[s_y], s[s_tmp], s[s_y]
    s_and_b32 s[s_x], s[s_tmp], s[s_x]
    s_and_b32 s[s_c], s[s_tmp], s[s_c]
    s_mul_i32 s[s_in_stride_c], s[s_hi], s[s_wi]
    s_mul_i32 s[s_tmp], s[s_in_stride_c], s[s_c]
    s_mul_i32 s[s_in_stride_c], s[s_in_stride_c], 8
    s_mul_i32 s[s_in_stride_n], s[s_in_stride_c], s[s_group]
    s_mul_i32 s[s_wei_stride_x], s[s_k], 8
    s_mul_i32 s[s_out_stride_k], s[s_wo], s[s_ho]
    s_mul_i32 s[s_tmp], s[s_k], s[s_out_stride_k]
    s_mul_i32 s[s_out_stride_k], 8, s[s_out_stride_k]
    s_mul_i32 s[s_out_stride_n], s[s_tmp], s[s_group]
    s_mul_i32  s[s_tmp], s[s_n], s[s_in_stride_n]
    s_mul_i32  s[s_tmp+1], s[s_n], s[s_out_stride_n]
    s_lshl_b32 s[s_tmp+4], s[s_tmp], 1
    s_lshl_b32 s[s_tmp+5], s[s_tmp+1], 1
    s_mul_i32 s[s_tmp], s[s_by], s[s_tmp+4]
    s_mul_hi_u32 s[s_tmp+1], s[s_by], s[s_tmp+4]
    s_add_u32 s[s_p_in], s[s_p_in], s[s_tmp]
    s_addc_u32 s[s_p_in+1], s[s_p_in+1], s[s_tmp+1]
    s_mul_i32 s[s_tmp], s[s_by], s[s_tmp+5]
    s_mul_hi_u32 s[s_tmp+1], s[s_by], s[s_tmp+5]
    s_add_u32 s[s_p_out], s[s_p_out], s[s_tmp]
    s_addc_u32 s[s_p_out+1], s[s_p_out+1], s[s_tmp+1]
    s_mul_i32 s[s_tmp], s[s_x], s[s_y]
    s_mul_i32 s[s_knum], s[s_tmp], s[s_c]
    s_mul_i32 s[s_dim_br], s[s_ho], s[s_wo]
    s_mul_i32 s[s_dim_nr], s[s_n], s[s_dim_br]
    s_add_u32 s[s_tmp], 127, s[s_dim_nr]
    s_lshr_b32 s[s_tmp+1], s[s_tmp], 7
    s_lshl_b32 s[s_dim_np], s[s_tmp+1], 7
    s_add_u32 s[s_tmp], 127, s[s_k]
    s_lshr_b32 s[s_tmp+1], s[s_tmp], 7
    s_lshl_b32 s[s_dim_mp], s[s_tmp+1], 7



    ; gemm_m_per_block:128, gemm_n_per_block:128, source_access_order:0
    s_lshr_b32 s[s_tmp], s[s_dim_mp], 7
    s_lshr_b32 s[s_tmp+1], s[s_dim_np], 7
    s_mul_i32 s[0], s[s_tmp+1], s[s_tmp]
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080018 ; offset:24, width:8
    .mdiv_u32_rem_ss s_tmp+4,s_block_gtc_ig,s_bx,s_magic_3,s_tmp+3,0,s_tmp
    s_mov_b32 s[s_bx], s[s_tmp+4]
    s_lshr_b32 s[0], s[s_dim_np], 7
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080000 ; offset:0, width:8
    .mdiv_u32_rem_ss s_tmp+4,s_tmp+5,s_bx,s_magic_0,s_tmp+3,0,s_tmp

    ; s_tmp+4:block_gtc_in, s_tmp+5:block_gtc_im
    s_lshl_b32 s[s_block_gtc_inb], s[s_tmp+4], 7
    s_lshl_b32 s[s_block_gtc_ik], s[s_tmp+5], 7
    v_add_nc_u32 v[v_tmp+5], s[s_block_gtc_inb], v[v_in_inb]
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080008 ; offset:8, width:8
    .mdiv_u32_rem_vs v_tmp+4,v_in_in,v_tmp+5,s_magic_1,s_tmp+3,s_dim_br,v_tmp
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080010 ; offset:16, width:8
    .mdiv_u32_rem_vs v_in_iwi_list,v_in_ihi_list,v_tmp+4,s_magic_2,s_tmp+3,s_wo,v_tmp
    v_mul_lo_u32 v[v_in_ihi_list], s[s_stride_h], v[v_in_ihi_list]
    v_sub_nc_i32 v[v_in_ihi_list], v[v_in_ihi_list], s[s_pad_h]
    v_mul_lo_u32 v[v_in_iwi_list], s[s_stride_w], v[v_in_iwi_list]
    v_sub_nc_i32 v[v_in_iwi_list], v[v_in_iwi_list], s[s_pad_w]



    s_mul_i32 s[s_tmp], s[s_y], s[s_x]
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_1], 0x00080000 ; offset:0, width:8
    .mdiv_u32_rem_vs v_tmp+4,v_gtc_ic,v_gtc_iec,s_magic_4,s_tmp+3,s_tmp,v_tmp
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_1], 0x00080008 ; offset:8, width:8
    .mdiv_u32_rem_vs v_gtc_ix,v_gtc_iy,v_tmp+4,s_magic_5,s_tmp+3,s_x,v_tmp
    v_mul_lo_u32 v[v_sst_a_os], s[s_dilation_h], v[v_gtc_iy]
    v_add_nc_u32 v[v_in_ihi_list], v[v_in_ihi_list], v[v_sst_a_os]
    v_mul_lo_u32 v[v_sld_a_os], s[s_dilation_w], v[v_gtc_ix]
    v_add_nc_u32 v[v_in_iwi_list], v[v_in_iwi_list], v[v_sld_a_os]
    v_cmp_gt_u32  s[s_n], v[v_in_in]
    v_cndmask_b32 v[v_tmp], 0, 1
    v_lshlrev_b32 v[v_in_flag_n], 0, v[v_tmp]



    s_lshl_b32 s[s_block_gtc_ig], s[s_block_gtc_ig], 1
    ; calculate wei offset
    s_mul_i32 s[s_tmp], s[s_x], s[s_y]
    s_mul_i32 s[s_tmp+3], s[s_k], s[s_group]
    s_mul_i32 s[s_tmp+2], s[s_tmp+3], 8
    s_mul_i32 s[s_tmp+2], s[s_tmp+2], s[s_c]
    s_mul_i32 s[s_tmp+2], s[s_tmp+2], s[s_tmp]
    s_mul_i32 s[s_tmp], s[s_block_gtc_ig], s[s_tmp+2]
    s_mul_hi_u32 s[s_tmp+1], s[s_block_gtc_ig], s[s_tmp+2]
    s_add_u32 s[s_p_wei], s[s_p_wei], s[s_tmp]
    s_addc_u32 s[s_p_wei+1], s[s_p_wei+1], s[s_tmp+1]
    v_add_nc_u32 v[v_tmp+5], s[s_block_gtc_ik], v[v_wei_ik]
    v_mul_lo_u32 v[v_tmp], s[s_wei_stride_x], v[v_gtc_iec]
    v_lshlrev_b32 v[v_tmp+4], 3, v[v_tmp+5]
    v_add_lshl_u32 v[v_wei_os], v[v_tmp], v[v_tmp+4], 1
    v_cmp_gt_u32  s[s_k], v[v_tmp+5]
    v_cndmask_b32 v[v_wei_flag], 0, 1
    v_mov_b32 v[v_wei_tmp_pack], v[v_wei_flag]
    s_mov_b32 s[s_tmp], 64
    v_add_nc_u32 v[v_tmp+5], s[s_tmp], v[v_tmp+5]
    v_cmp_gt_u32  s[s_k], v[v_tmp+5]
    v_cndmask_b32 v[v_wei_flag+1], 0, 1
    v_lshl_or_b32 v[v_wei_tmp_pack], v[v_wei_flag+1], 1, v[v_wei_tmp_pack]


    
    .v_clear_nc v_gld_b, 8
    s_mov_b32 s[s_p_wei+2], 0xffffffff
    s_mov_b32 s[s_p_wei+3], 0x31014000
    ; load weight
    buffer_load_dwordx4 v[v_gld_a+0:v_gld_a+0+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:0
    buffer_load_dwordx4 v[v_gld_a+4:v_gld_a+4+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:1024


    ; calculate in offset
    s_mov_b32 s[s_in_offset], 0
    s_mul_i32 s[s_tmp+2], s[s_c], s[s_in_stride_c]
    s_mul_i32 s[s_tmp], s[s_block_gtc_ig], s[s_tmp+2]
    s_mul_hi_u32 s[s_tmp+1], s[s_block_gtc_ig], s[s_tmp+2]
    s_add_u32 s[s_p_in], s[s_p_in], s[s_tmp]
    s_addc_u32 s[s_p_in+1], s[s_p_in+1], s[s_tmp+1]

    v_mul_lo_u32 v[v_tmp+1], s[s_in_stride_n], v[v_in_in]
    v_mul_lo_u32 v[v_tmp+4], s[s_in_stride_c], v[v_gtc_ic]
    v_mul_lo_u32 v[v_tmp], s[s_wi], v[v_in_ihi_list]
    v_add_nc_u32 v[v_tmp], v[v_in_iwi_list], v[v_tmp]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+4], v[v_tmp+1]
    v_lshlrev_b32 v[v_tmp], 3, v[v_tmp]
    v_add_lshl_u32 v[v_in_os], v[v_tmp+4], v[v_tmp], 1
    v_bfe_u32 v[v_tmp+1], v[v_in_flag_n],  0, 1
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_tmp+1]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_in_flag]




    s_mov_b32 s1, 64
    v_add_nc_u32 v[v_tmp], s1, v[v_in_inb]
    v_add_nc_u32 v[v_tmp+5], s[s_block_gtc_inb], v[v_tmp]
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080008 ; offset:8, width:8
    .mdiv_u32_rem_vs v_tmp+4,v_in_in,v_tmp+5,s_magic_1,s_tmp+3,s_dim_br,v_tmp

    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080010 ; offset:16, width:8
    .mdiv_u32_rem_vs v_in_iwi_list+1,v_in_ihi_list+1,v_tmp+4,s_magic_2,s_tmp+3,s_wo,v_tmp
    v_mul_lo_u32 v[v_in_ihi_list+1], s[s_stride_h], v[v_in_ihi_list+1]
    v_sub_nc_i32 v[v_in_ihi_list+1], v[v_in_ihi_list+1], s[s_pad_h]
    v_add_nc_u32 v[v_in_ihi_list+1], v[v_in_ihi_list+1], v[v_sst_a_os]
    v_mul_lo_u32 v[v_in_iwi_list+1], s[s_stride_w], v[v_in_iwi_list+1]
    v_sub_nc_i32 v[v_in_iwi_list+1], v[v_in_iwi_list+1], s[s_pad_w]
    v_add_nc_u32 v[v_in_iwi_list+1], v[v_in_iwi_list+1], v[v_sld_a_os]

    v_mul_lo_u32 v[v_tmp+1], s[s_in_stride_n], v[v_in_in]
    v_mul_lo_u32 v[v_tmp+4], s[s_in_stride_c], v[v_gtc_ic]
    v_mul_lo_u32 v[v_tmp], s[s_wi], v[v_in_ihi_list+1]
    v_add_nc_u32 v[v_tmp], v[v_in_iwi_list+1], v[v_tmp]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+4], v[v_tmp+1]
    v_lshlrev_b32 v[v_tmp], 3, v[v_tmp]
    v_add_lshl_u32 v[v_in_os+1], v[v_tmp+4], v[v_tmp], 1
    v_cmp_gt_u32  s[s_n], v[v_in_in]
    v_cndmask_b32 v[v_tmp], 0, 1
    v_lshl_or_b32 v[v_in_flag_n], v[v_tmp], 1, v[v_in_flag_n]
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_tmp]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_in_flag+1]
    s_mov_b32 s[s_p_in+2], 0xffffffff
    s_mov_b32 s[s_p_in+3], 0x31014000


    ; load input, nxe:1
    .v_clear_nc v_gld_b, 8
    v_cmpx_le_u32 1, v[v_in_flag]
    buffer_load_dwordx4 v[v_gld_b:v_gld_b+3], v[v_in_os], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1
    v_cmpx_le_u32 1, v[v_in_flag+1]
    buffer_load_dwordx4 v[v_gld_b+4:v_gld_b+4+3], v[v_in_os+1], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1



    v_mov_b32 v[v_tmp+5], v0
    ; c thread mapping 
    ; ->            MR x  NR x ML1 x NL1 x ML0 x NL0
    ;  cluster       1 x   1 x  1  x  1  x  1  x  1
    ;  perthrd       2 x   4 x  1  x  1  x  1  x  1
    v_and_b32 v[v_gemm_in], 31, v[v_tmp+5]
    v_lshrrev_b32 v[v_tmp+1], 5, v[v_tmp+5]
    v_and_b32 v[v_tmp], 7, v[v_tmp+5]
    v_lshl_or_b32 v[v_gemm_im], v[v_tmp+1], 3, v[v_tmp]
    
    ; LDS store, wei: 1,ce,1,k: 1x1x1x16, 1x4x1x64, k_pack:8, k_pack_gld_a:8, fp16
    v_lshlrev_b32 v[v_tmp+2], 3, v[v_wei_ik]
    v_lshl_or_b32 v[v_tmp], v[v_gtc_iec], 10, v[v_tmp+2]
    v_lshlrev_b32 v[v_sst_a_os], 1, v[v_tmp]



    v_lshlrev_b32 v[v_sld_a_os], 4, v[v_gemm_im] ; LDS load in
    ; LDS store, input: 1,ce,nb_vec_c: 1x1x2x8, 1x4x1x64, k_pack:8, k_pack_gld_b:8, fp16
    v_lshlrev_b32 v[v_tmp+2], 3,  v[v_in_inb]
    v_lshl_or_b32 v[v_tmp], v[v_gtc_iec], 10, v[v_tmp+2]
    v_lshlrev_b32 v[v_sst_b_os], 1, v[v_tmp]
    v_add_nc_u32 v[v_sst_b_os], 8192, v[v_sst_b_os]

    v_lshlrev_b32 v[v_sld_b_os], 4, v[v_gemm_in] ; LDS load wei
    v_add_nc_u32 v[v_sld_b_os], 8192, v[v_sld_b_os]
    ; init_co_lds_offset
    v_and_b32 v[v_tmp], v[v_gemm_im], 0xfffffff8
    v_lshlrev_b32 v[v_tmp+1], 3, v[v_gemm_in]
    v_lshl_or_b32 v[v_co_sst], v[v_tmp], 7, v[v_tmp+1]
    v_lshlrev_b32 v[v_co_sst], 1, v[v_co_sst]
    v_lshlrev_b32 v[v_co_sld], 4, v[0]

    ; init_co_sub_m_index
    v_lshrrev_b32 v[v_co_sub_m_index], 7, v[0]
    ; init_co_sub_n_index
    v_and_b32 v[v_co_sub_n_index], 127, v[0]

    v_lshl_add_u32 v[v_tmp], v[v_co_sub_m_index], 3, s[s_block_gtc_ik]
    v_cmp_gt_u32  s[s_k], v[v_tmp]
    v_cndmask_b32 v[v_out_flag], 0, 1
    ; output offset
    s_mul_i32 s[s_tmp+3], s[s_block_gtc_ig], s[s_k]
    s_lshl_b32 s[s_tmp+3], s[s_tmp+3], 1
    s_mul_i32 s[s_tmp], s[s_tmp+3], s[s_out_stride_k]
    s_mul_hi_u32 s[s_tmp+1], s[s_tmp+3], s[s_out_stride_k]
    s_add_u32 s[s_p_out], s[s_p_out], s[s_tmp]
    s_addc_u32 s[s_p_out+1], s[s_p_out+1], s[s_tmp+1]

    s_lshl_b32 s[s_tmp+3], s[s_block_gtc_ik], 1
    s_mul_i32 s[s_tmp], s[s_tmp+3], s[s_out_stride_k]
    s_mul_hi_u32 s[s_tmp+1], s[s_tmp+3], s[s_out_stride_k]
    s_add_u32 s[s_p_out], s[s_p_out], s[s_tmp]
    s_addc_u32 s[s_p_out+1], s[s_p_out+1], s[s_tmp+1]

    v_add_nc_u32 v[v_out_inb], s[s_block_gtc_inb], v[v_co_sub_n_index]   ; total n*ho*wo
    ;   compute from n1b
    s_bfe_u32 s[s_tmp+3], s[s_shift_pack_0], 0x00080008 ; offset:8, width:8
    .mdiv_u32_rem_vs v_tmp+4,v_out_in,v_out_inb,s_magic_1,s_tmp+3,s_dim_br,v_tmp

    v_mul_lo_u32 v[v_tmp], v[v_out_in], s[s_out_stride_n]
    v_lshlrev_b32 v[v_tmp], 1, v[v_tmp]
    v_lshl_add_u32 v[v_out_os], v[v_tmp+4], 4, v[v_tmp]

    v_mul_lo_u32 v[v_tmp], s[s_out_stride_k], v[v_co_sub_m_index]
    v_lshlrev_b32 v[v_tmp], 1, v[v_tmp]
    v_add_nc_u32 v[v_out_os], v[v_out_os], v[v_tmp]

    ; move slice stride
    v_bfe_u32 v[v_wei_flag], v[v_wei_tmp_pack], 0, 1
    s_lshl_b32 s[s_move_slice_k_stride_gemm_k], s[s_k], 5
    v_bfe_u32 v[v_wei_flag+1], v[v_wei_tmp_pack], 1, 1
    s_mul_i32 s[s_x_dilation_w], s[s_x], s[s_dilation_w]
    s_mul_i32 s[s_y_dilation_h], s[s_y], s[s_dilation_h]
    s_mul_i32 s[s_x_dilation_w], -1, s[s_x_dilation_w]
    s_mul_i32 s[s_y_dilation_h], -1, s[s_y_dilation_h]
    s_lshl_b32 s[s_tmp+5], s[s_wi], 4
    s_lshl_b32 s[s_tmp], s[s_in_stride_c], 2
    s_mul_i32 s[s_tmp+2], s[s_y], s[s_tmp+5]
    s_sub_i32 s[s_diff_in_os_ovf_y_acc_c], s[s_tmp], s[s_tmp+2]
    s_mul_i32 s[s_diff_in_iwi_acc_x], s[s_move_slice_k_x], s[s_dilation_w]
    s_mul_i32 s[s_diff_in_iwi_ovf_x], s[s_x], s[s_dilation_w]
    s_mul_i32 s[s_diff_in_ihi_acc_y], s[s_move_slice_k_y], s[s_dilation_h]
    s_mul_i32 s[s_tmp+5], s[s_tmp+5], s[s_dilation_h]
    s_mul_i32 s[s_tmp+2], s[s_tmp], s[s_move_slice_k_x]
    s_mul_i32 s[s_tmp+3], s[s_move_slice_k_c], s[s_in_stride_c]
    s_mul_i32 s[s_tmp], s[s_diff_in_ihi_acc_y], s[s_tmp+5]
    s_lshl_b32 s[s_tmp+1], s[s_tmp+3], 1
    s_add_u32 s[s_diff_in_os_acc_c_y_x], s[s_tmp], s[s_tmp+1]
    s_add_u32 s[s_diff_in_os_acc_c_y_x], s[s_diff_in_os_acc_c_y_x], s[s_tmp+2]
    s_lshl_b32 s[s_tmp], s[s_diff_in_iwi_ovf_x], 4
    s_sub_i32 s[s_diff_in_os_ovf_x_acc_y], s[s_tmp+5], s[s_tmp]
    s_mul_i32 s[s_y_x_c], s[s_x], s[s_y]
    s_mul_i32 s[s_y_x_c], s[s_y_x_c], s[s_c]
    s_lshl_b32 s[s_y_x_c], s[s_y_x_c], 1


    s_mov_b32 s[s_p_out+2], 0xffffffff
    s_mov_b32 s[s_p_out+3], 0x31014000
    ; start FMA loop, 8x8 thread tile with 4x4 sub-tile
    s_waitcnt vmcnt(2)
    ds_write_b128 v[v_sst_b_os], v[v_gld_b+0:v_gld_b+0+3] 
    ds_write_b128 v[v_sst_b_os], v[v_gld_b+4:v_gld_b+4+3] offset:1024

    s_waitcnt vmcnt(0)
    ds_write_b128 v[v_sst_a_os], v[v_gld_a+0:v_gld_a+0+3] 
    ds_write_b128 v[v_sst_a_os], v[v_gld_a+4:v_gld_a+4+3] offset:1024

    .v_clear_nc v_c, 64
    s_sub_i32 s[s_kitr], s[s_knum], 4
    s_cmp_gt_i32 s[s_kitr], 0
    s_cbranch_scc0 L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_end

    v_add_nc_u32 v[v_gtc_ix], v[v_gtc_ix], s[s_x_dilation_w]
    v_add_nc_u32 v[v_gtc_iy], v[v_gtc_iy], s[s_x_dilation_w]
    
    ; new move slice
    v_mov_b32 v[v_tmp+4], s[s_diff_in_os_acc_c_y_x]

    v_add_co_u32_e64 v[v_gtc_ix], vcc_lo, s[s_move_slice_k_x], v[v_gtc_ix]
    v_cndmask_b32 v[v_tmp], 0, s[s_x_dilation_w]
    v_cndmask_b32 v[v_tmp+1], 0, s[s_diff_in_os_ovf_x_acc_y]
    v_add_nc_u32 v[v_gtc_ix], v[v_gtc_ix], v[v_tmp]
    v_add3_u32 v[v_in_iwi_list], v[v_tmp], v[v_in_iwi_list], s[s_diff_in_iwi_acc_x]
    v_add3_u32 v[v_in_iwi_list+1], v[v_tmp], v[v_in_iwi_list+1], s[s_diff_in_iwi_acc_x]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+1], v[v_tmp+4]

    v_add_co_ci_u32 v[v_gtc_iy], v[v_gtc_iy], s[s_move_slice_k_y]
    v_cndmask_b32 v[v_tmp], 0, s[s_y_dilation_h]
    v_cndmask_b32 v[v_tmp+1], 0, s[s_diff_in_os_ovf_y_acc_c]
    v_add_nc_u32 v[v_gtc_iy], v[v_gtc_iy], v[v_tmp]
    v_add3_u32 v[v_in_ihi_list], v[v_tmp], v[v_in_ihi_list], s[s_diff_in_ihi_acc_y]
    v_add3_u32 v[v_in_ihi_list+1], v[v_tmp], v[v_in_ihi_list+1], s[s_diff_in_ihi_acc_y]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+1], v[v_tmp+4]

    v_add_co_ci_u32 v[v_gtc_ic], v[v_gtc_ic], s[s_move_slice_k_c]    
    v_cmp_gt_u32 vcc, s[s_c], v[v_gtc_ic]
    v_cndmask_b32 v[v_tmp+4], 0, 1, vcc

    v_add_nc_u32 v[v_wei_os], s[s_move_slice_k_stride_gemm_k], v[v_wei_os]
    v_add_nc_u32 v[v_in_os], v[v_tmp+4], v[v_in_os]
    v_add_nc_u32 v[v_in_os+1], v[v_tmp+4], v[v_in_os+1]

    v_bfe_u32 v[v_tmp+5], v[v_in_flag_n], 0, 1   ; extract flag_n
    v_and_b32 v[v_tmp+5], v[v_tmp+4], v[v_tmp+5]
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_tmp+5]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_in_flag]
    v_bfe_u32 v[v_tmp+5], v[v_in_flag_n], 1, 1   ; extract flag_n
    v_and_b32 v[v_tmp+5], v[v_tmp+4], v[v_tmp+5]
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_tmp+5]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_in_flag+1]

    v_xor_b32 v[v_sst_b_os], 0x4000, v[v_sst_b_os] ; switch double buffer b store
    v_xor_b32 v[v_sst_a_os], 0x4000, v[v_sst_a_os] ; switch double buffer a store
    s_waitcnt lgkmcnt(0)
    s_barrier

    ; load input, nxe:1
    .v_clear_nc v_gld_b, 8
    v_cmpx_le_u32 1, v[v_in_flag]
    buffer_load_dwordx4 v[v_gld_b:v_gld_b+3], v[v_in_os], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1
    v_cmpx_le_u32 1, v[v_in_flag+1]
    buffer_load_dwordx4 v[v_gld_b+4:v_gld_b+4+3], v[v_in_os+1], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1
    ; load weight
    buffer_load_dwordx4 v[v_gld_a+0:v_gld_a+0+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:0
    buffer_load_dwordx4 v[v_gld_a+4:v_gld_a+4+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:1024

L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_fma_body:
    ; do fma accumulate with unroll 4
    ds_read_b64 v[v_a:v_a+1], v[v_sld_a_os] 
    ds_read_b64 v[v_b:v_b+1], v[v_sld_b_os] 
    ds_read_b64 v[v_b+4:v_b+4+1], v[v_sld_b_os] offset:128
    ds_read_b64 v[v_a+4:v_a+4+1], v[v_sld_a_os] offset:128
    .itr_k = 0
    .rept 3
        s_waitcnt lgkmcnt(2)
        .v_dlops_fp16_4x4_s8 v_c,v_a,v_b
        s_waitcnt lgkmcnt(1)
        .v_dlops_fp16_4x4_s8 v_c+4,v_a,v_b+4
        ds_read_b64 v[v_a:v_a+1], v[v_sld_a_os] offset:0+(.itr_k+1)*256
        s_waitcnt lgkmcnt(1)
        .v_dlops_fp16_4x4_s8 v_c+32,v_a+4,v_b
        ds_read_b64 v[v_b:v_b+1], v[v_sld_b_os] offset:0+(.itr_k+1)*256
        .v_dlops_fp16_4x4_s8 v_c+36,v_a+4,v_b+4

        ds_read_b64 v[v_b+4:v_b+4+1], v[v_sld_b_os] offset:0+(.itr_k+1)*256+128
        ds_read_b64 v[v_a+4:v_a+4+1], v[v_sld_a_os] offset:0+(.itr_k+1)*256+128
        .itr_k = .itr_k + 1
    .endr

    ; last unroll
    v_xor_b32 v[v_sld_b_os], 16384, v[v_sld_b_os] ; switch double buffer b load
    v_xor_b32 v[v_sld_a_os], 16384, v[v_sld_a_os] ; switch double buffer a load
    s_waitcnt lgkmcnt(2)
    .v_dlops_fp16_4x4_s8 v_c,v_a,v_b
    s_waitcnt lgkmcnt(1)
    .v_dlops_fp16_4x4_s8 v_c+4,v_a,v_b+4
    s_waitcnt vmcnt(2)
    ds_write_b128 v[v_sst_b_os], v[v_gld_b+0:v_gld_b+0+3] 
    ds_write_b128 v[v_sst_b_os], v[v_gld_b+4:v_gld_b+4+3] offset:1024
    s_waitcnt vmcnt(0)
    ds_write_b128 v[v_sst_a_os], v[v_gld_a+0:v_gld_a+0+3] 
    ds_write_b128 v[v_sst_a_os], v[v_gld_a+4:v_gld_a+4+3] offset:2048
    s_sub_i32 s[s_kitr], s[s_kitr], 4
    s_cmp_gt_i32 s[s_kitr], 0
    s_cbranch_scc0 L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_fma_finishing
    
    ; move slice window
    v_mov_b32 v[v_tmp+4], s[s_diff_in_os_acc_c_y_x]

    v_add_co_u32_e64 v[v_gtc_ix], vcc_lo, s[s_move_slice_k_x], v[v_gtc_ix]
    v_cndmask_b32 v[v_tmp], 0, s[s_x_dilation_w]
    v_cndmask_b32 v[v_tmp+1], 0, s[s_diff_in_os_ovf_x_acc_y]
    v_add_nc_u32 v[v_gtc_ix], v[v_gtc_ix], v[v_tmp]
    v_add3_u32 v[v_in_iwi_list], v[v_tmp], v[v_in_iwi_list], s[s_diff_in_iwi_acc_x]
    v_add3_u32 v[v_in_iwi_list+1], v[v_tmp], v[v_in_iwi_list+1], s[s_diff_in_iwi_acc_x]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+1], v[v_tmp+4]

    v_add_co_ci_u32 v[v_gtc_iy], v[v_gtc_iy], s[s_move_slice_k_y]
    v_cndmask_b32 v[v_tmp], 0, s[s_y_dilation_h]
    v_cndmask_b32 v[v_tmp+1], 0, s[s_diff_in_os_ovf_y_acc_c]
    v_add_nc_u32 v[v_gtc_iy], v[v_gtc_iy], v[v_tmp]
    v_add3_u32 v[v_in_ihi_list], v[v_tmp], v[v_in_ihi_list], s[s_diff_in_ihi_acc_y]
    v_add3_u32 v[v_in_ihi_list+1], v[v_tmp], v[v_in_ihi_list+1], s[s_diff_in_ihi_acc_y]
    v_add_nc_u32 v[v_tmp+4], v[v_tmp+1], v[v_tmp+4]

    v_add_co_ci_u32 v[v_gtc_ic], v[v_gtc_ic], s[s_move_slice_k_c]    
    v_cmp_gt_u32 vcc, s[s_c], v[v_gtc_ic]
    v_cndmask_b32 v[v_tmp+4], 0, 1, vcc

    v_add_nc_u32 v[v_wei_os], s[s_move_slice_k_stride_gemm_k], v[v_wei_os]
    v_add_nc_u32 v[v_in_os], v[v_tmp+4], v[v_in_os]
    v_add_nc_u32 v[v_in_os+1], v[v_tmp+4], v[v_in_os+1]

    v_bfe_u32 v[v_tmp+5], v[v_in_flag_n], 0, 1   ; extract flag_n
    v_and_b32 v[v_tmp+5], v[v_tmp+4], v[v_tmp+5]
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_tmp+5]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list]
    v_cndmask_b32 v[v_in_flag], 0, v[v_in_flag]
    v_bfe_u32 v[v_tmp+5], v[v_in_flag_n], 1, 1   ; extract flag_n
    v_and_b32 v[v_tmp+5], v[v_tmp+4], v[v_tmp+5]
    v_cmp_gt_u32  s[s_hi], v[v_in_ihi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_tmp+5]
    v_cmp_gt_u32  s[s_wi], v[v_in_iwi_list+1]
    v_cndmask_b32 v[v_in_flag+1], 0, v[v_in_flag+1]
    
    s_waitcnt lgkmcnt(0)
    .v_dlops_fp16_4x4_s8 v_c+32,v_a+4,v_b
    v_xor_b32 v[v_sst_b_os], 16384, v[v_sst_b_os] ; switch double buffer b store
    v_xor_b32 v[v_sst_a_os], 16384, v[v_sst_a_os] ; switch double buffer a store
    s_waitcnt lgkmcnt(0)
    s_barrier
    ; load input, nxe:1
    .v_clear_nc v_gld_b, 8
    v_cmpx_le_u32 1, v[v_in_flag]
    buffer_load_dwordx4 v[v_gld_b:v_gld_b+3], v[v_in_os], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1
    v_cmpx_le_u32 1, v[v_in_flag+1]
    buffer_load_dwordx4 v[v_gld_b+4:v_gld_b+4+3], v[v_in_os+1], s[s_p_in:s_p_in+3], s[s_in_offset] offen offset:0
    s_mov_b64 exec, -1
    ; load weight
    buffer_load_dwordx4 v[v_gld_a+0:v_gld_a+0+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:0
    buffer_load_dwordx4 v[v_gld_a+4:v_gld_a+4+3], v[v_wei_os], s[s_p_wei:s_p_wei+3], 0 offen offset:1024
    .v_dlops_fp16_4x4_s8 v_c+36,v_a+4,v_b+4

    s_branch L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_fma_body
L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_fma_finishing:
    s_waitcnt lgkmcnt(0)
    .v_dlops_fp16_4x4_s8 v_c+32,v_a+4,v_b
    .v_dlops_fp16_4x4_s8 v_c+36,v_a+4,v_b+4
L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_end:
    s_waitcnt lgkmcnt(0)
    s_barrier
    ds_read_b64 v[v_a:v_a+1], v[v_sld_a_os] 
    ds_read_b64 v[v_b:v_b+1], v[v_sld_b_os] 
    ds_read_b64 v[v_b+4:v_b+4+1], v[v_sld_b_os] offset:128
    ds_read_b64 v[v_a+4:v_a+4+1], v[v_sld_a_os] offset:128
    .itr_k = 0
    .rept 3
        s_waitcnt lgkmcnt(2)
        .v_dlops_fp16_4x4_s8 v_c,v_a,v_b
        s_waitcnt lgkmcnt(1)
        .v_dlops_fp16_4x4_s8 v_c+4,v_a,v_b+4
        ds_read_b64 v[v_a:v_a+1], v[v_sld_a_os] offset:0+(.itr_k+1)*256
        s_waitcnt lgkmcnt(1)
        .v_dlops_fp16_4x4_s8 v_c+32,v_a+4,v_b
        ds_read_b64 v[v_b:v_b+1], v[v_sld_b_os] offset:0+(.itr_k+1)*256
        .v_dlops_fp16_4x4_s8 v_c+36,v_a+4,v_b+4

        ds_read_b64 v[v_b+4:v_b+4+1], v[v_sld_b_os] offset:0+(.itr_k+1)*256+128
        ds_read_b64 v[v_a+4:v_a+4+1], v[v_sld_a_os] offset:0+(.itr_k+1)*256+128
        .itr_k = .itr_k + 1
    .endr

    ; last unroll
    s_waitcnt lgkmcnt(2)
    .v_dlops_fp16_4x4_s8 v_c,v_a,v_b
    s_waitcnt lgkmcnt(1)
    .v_dlops_fp16_4x4_s8 v_c+4,v_a,v_b+4
    s_waitcnt lgkmcnt(0)
    .v_dlops_fp16_4x4_s8 v_c+32,v_a+4,v_b
    .v_dlops_fp16_4x4_s8 v_c+36,v_a+4,v_b+4

    ; coalescing store, gemm_mxn:128x128, block:256, m_repeatxm_perthread:2x4, n_repeatxn_perthread:2x4
    ; coalescing_groups:1, num_dword_per_group:64
    ; coalescing_groups_in_m_repeat:1, group_length_in_m_repeat:2, coalescing_groups_in_m_per_thread:1, group_length_in_m_per_thread:4
    s_mul_i32 s[s_tmp+1], 2, s[s_out_stride_k]    ; init per thread stride in m dimension
    ; start group 0, m index start from 0
    s_barrier
    ds_write2_b64 v[v_co_sst], v[v_c+0:v_c+1], v[v_c+2:v_c+3], offset0:0, offset1:16
    ds_write2_b64 v[v_co_sst], v[v_c+8+0:v_c+8+1], v[v_c+8+2:v_c+8+3], offset0:32, offset1:48
    ds_write2_b64 v[v_co_sst], v[v_c+16+0:v_c+16+1], v[v_c+16+2:v_c+16+3], offset0:64, offset1:80
    ds_write2_b64 v[v_co_sst], v[v_c+24+0:v_c+24+1], v[v_c+24+2:v_c+24+3], offset0:96, offset1:112
    ds_write2_b64 v[v_co_sst], v[v_c+32+0:v_c+32+1], v[v_c+32+2:v_c+32+3], offset0:128, offset1:144
    ds_write2_b64 v[v_co_sst], v[v_c+40+0:v_c+40+1], v[v_c+40+2:v_c+40+3], offset0:160, offset1:176
    ds_write2_b64 v[v_co_sst], v[v_c+48+0:v_c+48+1], v[v_c+48+2:v_c+48+3], offset0:192, offset1:208
    ds_write2_b64 v[v_co_sst], v[v_c+56+0:v_c+56+1], v[v_c+56+2:v_c+56+3], offset0:224, offset1:240
    s_waitcnt lgkmcnt(0)
    s_barrier
    ;   load from lds
    ds_read_u16 v[v_c], v[v_co_sld] 
    ds_read_u16 v[v_c], v[v_co_sld] offset:512
    ds_read_u16 v[v_c+2], v[v_co_sld] offset:1024
    ds_read_u16 v[v_c+2], v[v_co_sld] offset:1536
    ds_read_u16 v[v_c+4], v[v_co_sld] offset:2048
    ds_read_u16 v[v_c+4], v[v_co_sld] offset:2560
    ds_read_u16 v[v_c+6], v[v_co_sld] offset:3072
    ds_read_u16 v[v_c+6], v[v_co_sld] offset:3584
    ds_read_u16 v[v_c+8], v[v_co_sld] offset:4096
    ds_read_u16 v[v_c+8], v[v_co_sld] offset:4608
    ds_read_u16 v[v_c+10], v[v_co_sld] offset:5120
    ds_read_u16 v[v_c+10], v[v_co_sld] offset:5632
    ds_read_u16 v[v_c+12], v[v_co_sld] offset:6144
    ds_read_u16 v[v_c+12], v[v_co_sld] offset:6656
    ds_read_u16 v[v_c+14], v[v_co_sld] offset:7168
    ds_read_u16 v[v_c+14], v[v_co_sld] offset:7680
    ds_read_u16 v[v_c+16], v[v_co_sld] offset:8192
    ds_read_u16 v[v_c+16], v[v_co_sld] offset:8704
    ds_read_u16 v[v_c+18], v[v_co_sld] offset:9216
    ds_read_u16 v[v_c+18], v[v_co_sld] offset:9728
    ds_read_u16 v[v_c+20], v[v_co_sld] offset:10240
    ds_read_u16 v[v_c+20], v[v_co_sld] offset:10752
    ds_read_u16 v[v_c+22], v[v_co_sld] offset:11264
    ds_read_u16 v[v_c+22], v[v_co_sld] offset:11776
    ds_read_u16 v[v_c+24], v[v_co_sld] offset:12288
    ds_read_u16 v[v_c+24], v[v_co_sld] offset:12800
    ds_read_u16 v[v_c+26], v[v_co_sld] offset:13312
    ds_read_u16 v[v_c+26], v[v_co_sld] offset:13824
    ds_read_u16 v[v_c+28], v[v_co_sld] offset:14336
    ds_read_u16 v[v_c+28], v[v_co_sld] offset:14848
    ds_read_u16 v[v_c+30], v[v_co_sld] offset:15360
    ds_read_u16 v[v_c+30], v[v_co_sld] offset:15872
    ds_read_u16 v[v_c+32], v[v_co_sld] offset:16384
    ds_read_u16 v[v_c+32], v[v_co_sld] offset:16896
    ds_read_u16 v[v_c+34], v[v_co_sld] offset:17408
    ds_read_u16 v[v_c+34], v[v_co_sld] offset:17920
    ds_read_u16 v[v_c+36], v[v_co_sld] offset:18432
    ds_read_u16 v[v_c+36], v[v_co_sld] offset:18944
    ds_read_u16 v[v_c+38], v[v_co_sld] offset:19456
    ds_read_u16 v[v_c+38], v[v_co_sld] offset:19968
    ds_read_u16 v[v_c+40], v[v_co_sld] offset:20480
    ds_read_u16 v[v_c+40], v[v_co_sld] offset:20992
    ds_read_u16 v[v_c+42], v[v_co_sld] offset:21504
    ds_read_u16 v[v_c+42], v[v_co_sld] offset:22016
    ds_read_u16 v[v_c+44], v[v_co_sld] offset:22528
    ds_read_u16 v[v_c+44], v[v_co_sld] offset:23040
    ds_read_u16 v[v_c+46], v[v_co_sld] offset:23552
    ds_read_u16 v[v_c+46], v[v_co_sld] offset:24064
    ds_read_u16 v[v_c+48], v[v_co_sld] offset:24576
    ds_read_u16 v[v_c+48], v[v_co_sld] offset:25088
    ds_read_u16 v[v_c+50], v[v_co_sld] offset:25600
    ds_read_u16 v[v_c+50], v[v_co_sld] offset:26112
    ds_read_u16 v[v_c+52], v[v_co_sld] offset:26624
    ds_read_u16 v[v_c+52], v[v_co_sld] offset:27136
    ds_read_u16 v[v_c+54], v[v_co_sld] offset:27648
    ds_read_u16 v[v_c+54], v[v_co_sld] offset:28160
    ds_read_u16 v[v_c+56], v[v_co_sld] offset:28672
    ds_read_u16 v[v_c+56], v[v_co_sld] offset:29184
    ds_read_u16 v[v_c+58], v[v_co_sld] offset:29696
    ds_read_u16 v[v_c+58], v[v_co_sld] offset:30208
    ds_read_u16 v[v_c+60], v[v_co_sld] offset:30720
    ds_read_u16 v[v_c+60], v[v_co_sld] offset:31232
    ds_read_u16 v[v_c+62], v[v_co_sld] offset:31744
    ds_read_u16 v[v_c+62], v[v_co_sld] offset:32256
    v_cmpx_eq_u32 1, v[v_out_flag]
    ;   store to global, m index start from 0, m0:0, m1:0
    s_mov_b32 s[s_tmp], 0
    s_waitcnt lgkmcnt(62)
    buffer_store_short v[v_c], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+1], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(60)
    buffer_store_short v[v_c+2], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+3], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(58)
    buffer_store_short v[v_c+4], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+5], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(56)
    buffer_store_short v[v_c+6], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+7], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(54)
    buffer_store_short v[v_c+8], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+9], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(52)
    buffer_store_short v[v_c+10], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+11], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(50)
    buffer_store_short v[v_c+12], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+13], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(48)
    buffer_store_short v[v_c+14], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+15], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(46)
    buffer_store_short v[v_c+16], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+17], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(44)
    buffer_store_short v[v_c+18], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+19], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(42)
    buffer_store_short v[v_c+20], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+21], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(40)
    buffer_store_short v[v_c+22], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+23], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(38)
    buffer_store_short v[v_c+24], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+25], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(36)
    buffer_store_short v[v_c+26], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+27], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(34)
    buffer_store_short v[v_c+28], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+29], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(32)
    buffer_store_short v[v_c+30], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+31], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(30)
    buffer_store_short v[v_c+32], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+33], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(28)
    buffer_store_short v[v_c+34], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+35], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(26)
    buffer_store_short v[v_c+36], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+37], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(24)
    buffer_store_short v[v_c+38], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+39], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(22)
    buffer_store_short v[v_c+40], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+41], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(20)
    buffer_store_short v[v_c+42], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+43], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(18)
    buffer_store_short v[v_c+44], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+45], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(16)
    buffer_store_short v[v_c+46], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+47], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(14)
    buffer_store_short v[v_c+48], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+49], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(12)
    buffer_store_short v[v_c+50], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+51], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(10)
    buffer_store_short v[v_c+52], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+53], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(8)
    buffer_store_short v[v_c+54], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+55], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(6)
    buffer_store_short v[v_c+56], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+57], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(4)
    buffer_store_short v[v_c+58], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+59], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(2)
    buffer_store_short v[v_c+60], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+61], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    s_waitcnt lgkmcnt(0)
    buffer_store_short v[v_c+62], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_add_u32 s[s_tmp], s[s_tmp+1], s[s_tmp]
    buffer_store_short v[v_c+63], v[v_out_os], s[s_p_out:s_p_out+3], s[s_tmp] offen offset:0
    s_mov_b64 exec, -1

s_branch L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_out
    ; debug code to cpy vgpr to host
    L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_dbg:
    s_nop 256
    s_waitcnt lgkmcnt(0)
    s_waitcnt vmcnt(0)
    s_barrier
    s_cmp_lg_u32 s[s_dbg+2], 0
    s_cbranch_scc1 L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_out_1
    s_cmp_lg_u32 s[s_dbg+3], 0
    s_cbranch_scc1 L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_out_1
    ;v_mov_b32 v[v_tmp], vcc_hi
    s_mov_b32 s[s_tmp], 0
    s_mov_b32 s[s_p_out], s[s_dbg]
    s_mov_b32 s[s_p_out+1], s[s_dbg+1]
    s_mov_b32 s[s_p_out+2], 0x80000000
    s_mov_b32 s[s_p_out+3], 0x31014000

    buffer_store_dword v[v_gtc_ic], v[v_dbg], s[s_p_out+0:s_p_out+3], s[s_tmp] offen

    ;global_store_dword  v[v_dbg], v[0], s[s_p_out+0:s_p_out+1]
    s_waitcnt vmcnt(0)
    s_barrier

    L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_out_1:
    s_nop 2
    s_waitcnt lgkmcnt(0)
    s_waitcnt vmcnt(0)
    s_barrier

L_igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me_out:
    s_endpgm
.rodata
.p2align 6
.amdhsa_kernel igemm_fwd_gtc_nchwc_fp16_bx0_ex1_bt128x128x32_tt8x8_gm2x4x4_gn2x4x4_ta1x1x1x16_1x4x1x64_tb1x1x2x8_1x4x1x64_me
    .amdhsa_group_segment_fixed_size 32768
    .amdhsa_user_sgpr_kernarg_segment_ptr 1
    .amdhsa_system_sgpr_workgroup_id_x 1
    .amdhsa_system_sgpr_workgroup_id_y 1
    .amdhsa_system_sgpr_workgroup_id_z 1
    .amdhsa_system_vgpr_workitem_id 0
    .amdhsa_next_free_vgpr 144
    .amdhsa_next_free_sgpr 66
    .amdhsa_ieee_mode 0
    .amdhsa_dx10_clamp 0
    .amdhsa_wavefront_size32 0
    .amdhsa_workgroup_processor_mode 1
.end_amdhsa_kernel

